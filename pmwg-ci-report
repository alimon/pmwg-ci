#!/bin/bash

# Give the opportunity the caller of the script to specify the directory
# where the repository is located, otherwise default to the current
# directory
REPOPATH=${1:-$PWD}

# Move into the repo
cd $REPOPATH

# kernelci is using abbrev=12 inherited from Jenkins
ABBREV=12

# Get the git description conforming to kernelci
GIT_DESCR=$(git describe --abbrev=$ABBREV)
# Build the url
if [ -z $KERNELCI_BASE_URL ]; then
	KERNELCI_BASE_URL=https://storage.kernelci.org/pmwg/integ
fi
KERNELCI_URL=$KERNELCI_BASE_URL/$GIT_DESCR/build-logs-summary.txt

BLAME_SCRIPT=pmwg-ci-blame

pmwg-ci_report() {

    URL=$KERNELCI_URL

    git tag | grep -q report-$GIT_DESCR && return 1

    ERRORS="$(curl -s -f $URL)"
    if [ $? -ne 0 ]; then
	return 1
    fi

    RET=0
    echo "$ERRORS" | while read -r ERROR; do

	# ignore commented lines
	echo $ERROR | egrep -q '(^#|^\s*$|^\s*\t*#)' && continue

	FILE=$(echo $ERROR | awk '{ print $2 }' | awk -F ':' '{print $1}')
	LINE=$(echo $ERROR | awk '{ print $2 }' | awk -F ':' '{print $2}')

	# Do not display anything, so if there is no warning/error belonging
	# to one of *our* branch, then we end up with nothing on the input, so
	# nothing on the email report => everything ok.
	$BLAME_SCRIPT $FILE $LINE "$ERROR"
	RET=$(( RET + $? ))
    done

    # Add a tag to the tree, so we know that the branch can't be tested
    if [ $RET -ne 0]; then
        git tag blame-$GIT_DESCR
    fi

    # Add a tag to the tree, so we know the report was already done.
    git tag report-$GIT_DESCR

    return $RET
}

pmwg-ci_report
